@model IEnumerable<Sensor>

<link rel="stylesheet" href="../../Content/css/matrix-style.css" />

<div class="chooseSensor">
    <span class="icon"> <i class="icon-align-justify"></i>
        Sensors count: <span class="sensorsCount">@Model.Count()</span>
    </span>
</div>
<table class="table-fill" width="100%">
    <tr>
        <th class="text-left">
            #
        </th>
        <th class="text-left" style="display: none;">
            @Html.DisplayNameFor(model => model.First().Id)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().SensorName)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().Description)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().Url)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().MeasureType)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().PollingInterval)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().AccessIsPublic)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().MinRange)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().MaxRange)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().CurrentValue)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().LastUpdated)
        </th>
        <th class="text-left">
            @Html.DisplayNameFor(model => model.First().OwnerId)
        </th>
    </tr>

    <tbody class="table hover">
        @{
            int sensorIndex = 0;
        }
        @foreach (Sensor sensor in Model)
        {
            <tr class="tableRow">
                <td class="text-left">
                    @{
                        string index = (sensorIndex + 1).ToString();
                        string className = "sensorIndex" + sensorIndex;
                    }
                    @index
                </td>
                <td class="text-left" style="display: none;">
                    @Html.DisplayFor(modelItem => sensor.Id)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.SensorName)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.Description)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.Url)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.MeasureType)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.PollingInterval)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.AccessIsPublic)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.MinRange)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.MaxRange)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.CurrentValue)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.LastUpdated)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.OwnerId)
                </td>
            </tr>
            <tr class="tableRowDiv @className">
                <td colspan="12">
                    <div>
                        <div class="container-fluid">
                            <div class="row-fluid">
                                <div class="span12">
                                    <div class="widget-box">
                                        <div class="widget-title">
                                            <span class="icon"> <i class="icon-signal"></i> </span>
                                            <h5>Sensor value in real time</h5>
                                        </div>
                                        <div class="widget-content">
                                            <div id="placeholder2"></div>
                                            <p>
                                                Time between updates:
                                                <input id="updateInterval" type="text" value="" style="text-align: right; width:5em">
                                                milliseconds
                                                <span style="float: right">Current value: <span class="value"></span> @sensor.MeasureType</span>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
            sensorIndex++;
        }
    </tbody>
</table>

<script src="../../Scripts/js/jquery.min.js"></script>
<script src="../../Scripts/js/jquery.flot.min.js"></script>
<script type="text/javascript">
    var binded = 0;
    $(function () {
        var length = 300;
        var data = [], totalPoints = 300;
        while(length--) data.push(0);

        function getRandomData() {
            if (data.length >= 300)
                data = data.slice(1);

            if (binded == 0) {
                $(".table-fill").on("click", ".tableRow", function () {
                    let selected = $(this).text().trim();
                    console.log(selected)
                    //$(".chooseSensor").toggle();
                    //var idOfParent = $(this).parents('table').attr('id');
                    //$("#" + idOfParent).toggle();
                    //$(".widget-box").toggle();
                    //var values = selected.split("\n");
                    //values = values.map(string => {
                    //    return string.trim()
                    //})
                    //values = arr = values.filter(function (n) { return n != '' });
                    //$("#sensorId").html(values[0]);
                    //$('#sensorName').attr("placeholder", values[1]);
                    //$('#sensorDescription').attr("placeholder", values[2]);
                    //$("#sensorUrl").html(values[3]);
                    //$('#hiddenSensorUrl').attr("value", values[1]);
                    //$("#sensorMeasureType").html(values[4]);
                    //$('#sensorPollingInterval').attr("placeholder", parseInt(values[5]));
                    //$('#sensorPollingInterval').attr("min", parseInt(values[5]));
                    //$('#sensorMinValue').attr("placeholder", parseInt(values[6]));
                    //$('#sensorMinValue').attr("min", parseInt(values[6]));
                    //$('#sensorMinValue').attr("max", parseInt(values[7]));
                    //$('#sensorMaxValue').attr("placeholder", parseInt(values[7]));
                    //$('#sensorMaxValue').attr("min", parseInt(values[6]));
                    //$('#sensorMaxValue').attr("max", parseInt(values[7]));
                });
                binded = 1;
            }
            

            

















              $.ajax({
                url: 'http://telerikacademy.icb.bg/api/sensor/f1796a28-642e-401f-8129-fd7465417061',
                method:'GET',
                beforeSend: function(xhr){xhr.setRequestHeader('auth-token', '8e4c46fe-5e1d-4382-b7fc-19541f7bf3b0');},
                }).done (function (result) {
                    data.push(result.value)
                    $(".value").text(result.value)
                }
              )

              var res = [];
              for (var i = 0; i < data.length; ++i)
              res.push([i, data[i]])
              return res;
        }

        var updateInterval = 1000;
        $("#updateInterval").val(updateInterval).change(function () {
            var v = $(this).val();
            if (v && !isNaN(+v)) {
                updateInterval = +v;
                if (updateInterval < 1)
                    updateInterval = 1;
                if (updateInterval > 2000)
                    updateInterval = 2000;
                $(this).val("" + updateInterval);
            }
        });

        var options = {
            series: { shadowSize: 0 },
            yaxis: { min: 15, max: 28 },
            xaxis: { show: false }
        };
        var plot = $.plot($("#placeholder2"), [ getRandomData() ], options);

        function update() {
            plot.setData([ getRandomData() ]);

            plot.draw();

            setTimeout(update, updateInterval);
        }

        update();
    });

    $('.tableRow').click(function () {
        $(this).nextUntil('tr.tableRow').slideToggle(0);
    });

    $(document).ready(function () {
        $(".tableRowDiv").toggle();
    });
</script>